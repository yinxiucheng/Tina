package com.live_common.download.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import tina.com.common.download.entity.DownloadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_INFO".
*/
public class DownloadInfoDao extends AbstractDao<DownloadInfo, String> {

    public static final String TABLENAME = "DOWNLOAD_INFO";

    /**
     * Properties of entity DownloadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Tag = new Property(0, String.class, "tag", true, "TAG");
        public final static Property FileName = new Property(1, String.class, "fileName", false, "FILE_NAME");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Finish = new Property(3, long.class, "finish", false, "FINISH");
        public final static Property Length = new Property(4, long.class, "length", false, "LENGTH");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property Progress = new Property(6, int.class, "progress", false, "PROGRESS");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property AcceptRanges = new Property(8, boolean.class, "acceptRanges", false, "ACCEPT_RANGES");
        public final static Property Image = new Property(9, String.class, "image", false, "IMAGE");
        public final static Property PackageName = new Property(10, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property VersionCode = new Property(11, String.class, "versionCode", false, "VERSION_CODE");
    }

    private DaoSession daoSession;


    public DownloadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_INFO\" (" + //
                "\"TAG\" TEXT PRIMARY KEY NOT NULL ," + // 0: tag
                "\"FILE_NAME\" TEXT," + // 1: fileName
                "\"URL\" TEXT," + // 2: url
                "\"FINISH\" INTEGER NOT NULL ," + // 3: finish
                "\"LENGTH\" INTEGER NOT NULL ," + // 4: length
                "\"STATUS\" INTEGER NOT NULL ," + // 5: status
                "\"PROGRESS\" INTEGER NOT NULL ," + // 6: progress
                "\"NAME\" TEXT," + // 7: name
                "\"ACCEPT_RANGES\" INTEGER NOT NULL ," + // 8: acceptRanges
                "\"IMAGE\" TEXT," + // 9: image
                "\"PACKAGE_NAME\" TEXT," + // 10: packageName
                "\"VERSION_CODE\" TEXT);"); // 11: versionCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadInfo entity) {
        stmt.clearBindings();
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(1, tag);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
        stmt.bindLong(4, entity.getFinish());
        stmt.bindLong(5, entity.getLength());
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getProgress());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
        stmt.bindLong(9, entity.getAcceptRanges() ? 1L: 0L);
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(10, image);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(11, packageName);
        }
 
        String versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindString(12, versionCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadInfo entity) {
        stmt.clearBindings();
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(1, tag);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
        stmt.bindLong(4, entity.getFinish());
        stmt.bindLong(5, entity.getLength());
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getProgress());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
        stmt.bindLong(9, entity.getAcceptRanges() ? 1L: 0L);
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(10, image);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(11, packageName);
        }
 
        String versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindString(12, versionCode);
        }
    }

    @Override
    protected final void attachEntity(DownloadInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DownloadInfo readEntity(Cursor cursor, int offset) {
        DownloadInfo entity = new DownloadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tag
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.getLong(offset + 3), // finish
            cursor.getLong(offset + 4), // length
            cursor.getInt(offset + 5), // status
            cursor.getInt(offset + 6), // progress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.getShort(offset + 8) != 0, // acceptRanges
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // image
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // packageName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // versionCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadInfo entity, int offset) {
        entity.setTag(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFinish(cursor.getLong(offset + 3));
        entity.setLength(cursor.getLong(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setProgress(cursor.getInt(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAcceptRanges(cursor.getShort(offset + 8) != 0);
        entity.setImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPackageName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVersionCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DownloadInfo entity, long rowId) {
        return entity.getTag();
    }
    
    @Override
    public String getKey(DownloadInfo entity) {
        if(entity != null) {
            return entity.getTag();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadInfo entity) {
        return entity.getTag() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
